/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BankService.Interfaces
{
  public partial class AccountService {
    public interface Iface {
      List<Account> GetAccounts(long customerId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccounts(AsyncCallback callback, object state, long customerId);
      List<Account> End_GetAccounts(IAsyncResult asyncResult);
      #endif
      long CreateAccount(long customerId, Account account);
      #if SILVERLIGHT
      IAsyncResult Begin_CreateAccount(AsyncCallback callback, object state, long customerId, Account account);
      long End_CreateAccount(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccounts(AsyncCallback callback, object state, long customerId)
      {
        return send_GetAccounts(callback, state, customerId);
      }

      public List<Account> End_GetAccounts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccounts();
      }

      #endif

      public List<Account> GetAccounts(long customerId)
      {
        #if !SILVERLIGHT
        send_GetAccounts(customerId);
        return recv_GetAccounts();

        #else
        var asyncResult = Begin_GetAccounts(null, null, customerId);
        return End_GetAccounts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccounts(AsyncCallback callback, object state, long customerId)
      #else
      public void send_GetAccounts(long customerId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccounts", TMessageType.Call, seqid_));
        GetAccounts_args args = new GetAccounts_args();
        args.CustomerId = customerId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Account> recv_GetAccounts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccounts_result result = new GetAccounts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccounts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CreateAccount(AsyncCallback callback, object state, long customerId, Account account)
      {
        return send_CreateAccount(callback, state, customerId, account);
      }

      public long End_CreateAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateAccount();
      }

      #endif

      public long CreateAccount(long customerId, Account account)
      {
        #if !SILVERLIGHT
        send_CreateAccount(customerId, account);
        return recv_CreateAccount();

        #else
        var asyncResult = Begin_CreateAccount(null, null, customerId, account);
        return End_CreateAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateAccount(AsyncCallback callback, object state, long customerId, Account account)
      #else
      public void send_CreateAccount(long customerId, Account account)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CreateAccount", TMessageType.Call, seqid_));
        CreateAccount_args args = new CreateAccount_args();
        args.CustomerId = customerId;
        args.Account = account;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_CreateAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateAccount_result result = new CreateAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateAccount failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetAccounts"] = GetAccounts_Process;
        processMap_["CreateAccount"] = CreateAccount_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetAccounts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccounts_args args = new GetAccounts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccounts_result result = new GetAccounts_result();
        result.Success = iface_.GetAccounts(args.CustomerId);
        oprot.WriteMessageBegin(new TMessage("GetAccounts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateAccount_args args = new CreateAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateAccount_result result = new CreateAccount_result();
        result.Success = iface_.CreateAccount(args.CustomerId, args.Account);
        oprot.WriteMessageBegin(new TMessage("CreateAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccounts_args : TBase
    {
      private long _customerId;

      public long CustomerId
      {
        get
        {
          return _customerId;
        }
        set
        {
          __isset.customerId = true;
          this._customerId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customerId;
      }

      public GetAccounts_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  CustomerId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAccounts_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.customerId) {
            field.Name = "customerId";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(CustomerId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAccounts_args(");
        bool __first = true;
        if (__isset.customerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomerId: ");
          __sb.Append(CustomerId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccounts_result : TBase
    {
      private List<Account> _success;

      public List<Account> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccounts_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Account>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      Account _elem2;
                      _elem2 = new Account();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAccounts_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Account _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAccounts_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateAccount_args : TBase
    {
      private long _customerId;
      private Account _account;

      public long CustomerId
      {
        get
        {
          return _customerId;
        }
        set
        {
          __isset.customerId = true;
          this._customerId = value;
        }
      }

      public Account Account
      {
        get
        {
          return _account;
        }
        set
        {
          __isset.account = true;
          this._account = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customerId;
        public bool account;
      }

      public CreateAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  CustomerId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Account = new Account();
                  Account.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateAccount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.customerId) {
            field.Name = "customerId";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(CustomerId);
            oprot.WriteFieldEnd();
          }
          if (Account != null && __isset.account) {
            field.Name = "account";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Account.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateAccount_args(");
        bool __first = true;
        if (__isset.customerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomerId: ");
          __sb.Append(CustomerId);
        }
        if (Account != null && __isset.account) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Account: ");
          __sb.Append(Account== null ? "<null>" : Account.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateAccount_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateAccount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateAccount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
